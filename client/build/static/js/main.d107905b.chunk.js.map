{"version":3,"sources":["components/Header.js","components/Layout.js","components/Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","List","tweetss","this","props","tweet","map","twe","index","Col","key","sm","Card","border","Image","src","Userimg","rounded","tweetUser","Body","Text","symbolTweets","syms","symss","item","ListGroup","Item","onClick","deleteItems","value","Container","fluid","Row","Search","tweetsbody","state","filter","twee","symbolname","symbols","symb","setState","searchres","handleChange","bind","handleSubmit","event","searchTerm","target","toLowerCase","toUpperCase","sy","i","length","push","includes","axios","url","method","data","then","response","tweetsdata","status","newsymbol","messages","newsymboltweets","symbol","body","user","username","avatar_url","preventDefault","onSubmit","type","onChange","list","placeholder","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d107905b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../sass/header.scss'\r\n\r\nclass Header extends React.Component{\r\nrender(){\r\n    return(\r\n        <nav className=\"na\">\r\n            <div className=\"head\">\r\n                 StockTwits\r\n            </div>   \r\n        </nav>\r\n    )\r\n}\r\n}\r\nexport default Header;\r\n","\r\nimport React from 'react';\r\n\r\nimport '../sass/list.scss'\r\nimport '../sass/layout.scss'\r\n\r\nimport  Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport  Row from 'react-bootstrap/Row'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nclass List extends React.Component{ \r\nrender(){\r\n    let tweetss = this.props.tweet.map((twe,index) =>{\r\n        return(\r\n          <Col key={index} sm=\"12\" className=\"cardcol\" >\r\n              <Card className=\"cardstyles\" border=\"primary\">\r\n                <Card.Header className=\"cardhead\">\r\n                  <Image src={twe.Userimg} rounded />\r\n                  <div className=\"userna\">{twe.tweetUser}</div>\r\n                </Card.Header>\r\n                <Card.Body className=\"cardbody\">\r\n                <Card.Text>\r\n                    {twe.symbolTweets}\r\n                </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        )\r\n      })\r\n      \r\n      let syms = this.props.symss.map((item,index)=>{\r\n        return (\r\n      <div className=\"listgroup\" key={index}>\r\n                    <ListGroup>\r\n                        <ListGroup.Item  \r\n                        className=\"listitem\" \r\n                        onClick={()=> {this.props.deleteItems(item)}}>\r\n                        {item.value} \r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n      </div>\r\n        )\r\n      })\r\n  \r\n    return(\r\n     <Container fluid className=\"conta\">\r\n             <Row>\r\n                  <Col sm=\"9\" className=\"tweecol\" >\r\n                    <div className=\"containerdiv\">\r\n                      <Container className=\"cardcon\">\r\n                        <Row>\r\n                          {tweetss}\r\n                      </Row>\r\n                      </Container>\r\n                    </div>\r\n                  </Col>\r\n                <Col sm=\"3\" >\r\n                  <div className=\"listdiv\">\r\n                    {syms}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n     </Container>\r\n    )\r\n}\r\n}\r\n\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport Layout from \"./Layout\";\r\n\r\nimport '../sass/list.scss'\r\nimport '../sass/searchbox.scss'\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      symbols: [],\r\n      tweetsbody:[],\r\n      searchres:'',\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const searchTerm = event.target.value;\r\n    this.setState({ value: searchTerm.toLowerCase()});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    const key= this.state.value.toUpperCase();\r\n    const sy= []\r\n    for(let i=0;i<this.state.symbols.length;i++){\r\n      sy.push(this.state.symbols[i].value)\r\n    }\r\n\r\n    if(this.state.value.length !== 0 && !sy.includes(key)){\r\n          axios({\r\n          url: \"/data\",\r\n          method: \"post\",\r\n          data: {\r\n            value: this.state.value\r\n          }\r\n          }).then(response => {\r\n            const tweet = response.data.tweetsdata;\r\n            if(tweet.response.status === 200){\r\n                    const  newsymbol = {\r\n                      value:this.state.value.toUpperCase(),\r\n                };\r\n                this.state.symbols.push(newsymbol)\r\n                for(let i= 0; i<tweet.messages.length;i++){\r\n                    const newsymboltweets= {\r\n                      symbolname: tweet.symbol.symbol,\r\n                      symbolTweets: tweet.messages[i].body,\r\n                      tweetUser : tweet.messages[i].user.username,\r\n                      Userimg : tweet.messages[i].user.avatar_url,\r\n                    }\r\n                this.state.tweetsbody.push(newsymboltweets)\r\n                }\r\n              }\r\n            this.setState({value:\"\",searchres:tweet.response.status})\r\n        });\r\n      }\r\n    event.preventDefault();\r\n  }\r\n\r\n  deleteItems =(item) =>{\r\n    const tweetsbody =  this.state.tweetsbody.filter(twee => twee.symbolname !== item.value)\r\n    const symbols=this.state.symbols.filter(symb => symb.value !== item.value)\r\n    this.setState({tweetsbody,symbols})\r\n  }\r\n\r\n  render() {\r\n      const {\r\n        searchres,\r\n      } = this.state;\r\n\r\n    return (\r\n      <div className=\"searchdiv\">\r\n          <form  onSubmit={this.handleSubmit} className=\"search\">\r\n                  <div> \r\n                      <input \r\n                      className=\"searchbox\" \r\n                      type=\"text\" \r\n                      onChange={this.handleChange} \r\n                      value={this.state.list} \r\n                      placeholder=\"Search Symbols Here\"/>\r\n                  </div>\r\n                  <div>\r\n                      <button \r\n                      className=\"add\" \r\n                      type=\"submit\"> \r\n                      Add Symbol\r\n                      </button>\r\n                  </div>\r\n          </form> \r\n           {searchres === 200 && (\r\n            <Layout tweet={this.state.tweetsbody} symss= {this.state.symbols} deleteItems={this.deleteItems}/>\r\n           )}\r\n            {searchres === 404 && (\r\n            <Layout tweet={this.state.tweetsbody} symss= {this.state.symbols}/>\r\n           )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Search;\r\n\r\n","import React from 'react';\nimport Header from \"./components/Header\";\nimport Search from \"./components/Searchbox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}